/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(/*! ./reactProdInvariant */ "../../node_modules/react-dom/lib/reactProdInvariant.js");

var DOMLazyTree = __webpack_require__(/*! ./DOMLazyTree */ "../../node_modules/react-dom/lib/DOMLazyTree.js");
var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ "../../node_modules/fbjs/lib/ExecutionEnvironment.js");

var createNodesFromMarkup = __webpack_require__(/*! fbjs/lib/createNodesFromMarkup */ "../../node_modules/fbjs/lib/createNodesFromMarkup.js");
var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ "../../node_modules/fbjs/lib/emptyFunction.js");
var invariant = __webpack_require__(/*! fbjs/lib/invariant */ "../../node_modules/fbjs/lib/invariant.js");

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ?  false ? undefined : _prodInvariant('56') : void 0;
    !markup ?  false ? undefined : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ?  false ? undefined : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;

//# sourceURL=webpack:////home/tcagent/.buildAgent/work/af845e0f9afe3754/node_modules/react-dom/lib/Danger.js?